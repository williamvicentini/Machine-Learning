# -*- coding: utf-8 -*-
"""Tratamento de Dados 2 - Categoricas - com rede neural de classificacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vmhvXtFf-NEKuH_Tm-_--dE8L81uETay
"""

import pandas as pd
import numpy as np
import tensorflow as tf

base = pd.read_csv('/content/census.csv')

def trim_all_columns(df):
    trim_strings = lambda x: x.strip() if isinstance(x, str) else x
    return df.applymap(trim_strings)

base = trim_all_columns(base)

base.head()

previsores = base.iloc[:,0:14].values

previsores

saida = base.iloc[:,14].values

saida

"""Converter as variaveis categoricas em numericas

"""

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
labelencoder_previsores = LabelEncoder()

previsores

onehotencorder = ColumnTransformer(transformers=[("OneHot", OneHotEncoder(), [1,3,5,6,7,8,9,13])],remainder='passthrough')
previsores = onehotencorder.fit_transform(previsores).toarray()

previsores

labelencorder_saida = LabelEncoder()
saida = labelencorder_saida.fit_transform(saida)

saida

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler(with_mean=False)
previsores = scaler.fit_transform(previsores)

previsores

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(previsores, saida, test_size = 0.2, random_state = 5)

X_train.shape

y_train.shape

classifier = tf.keras.models.Sequential()
classifier.add(tf.keras.layers.Dense(units=100, activation='relu', input_shape=(108, )))
classifier.add(tf.keras.layers.Dense(units=100, activation='relu'))
classifier.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

classifier.summary()

classifier.compile(optimizer='Adam', loss='binary_crossentropy', metrics = ['accuracy'])

epochs_hist = classifier.fit(X_train, y_train, epochs=200)

entrada = [[39,'State-gov',77516,'Bachelors',13,'Never-married','Adm-clerical','Not-in-family','White','Male',2174,0,40,'United-States']]

entradaencoded = onehotencorder.transform(entrada)

entradaescalonada = scaler.transform(entradaencoded)

previsao = classifier.predict(entradaescalonada)

labelencorder_saida.inverse_transform(previsao[0].astype(int))

base.loc[base['income'] == '>50K']

entrada = base.loc[base['income'] == '>50K']

entrada = base.loc[base['income'] == '>50K'].iloc[1:2,0:14]

entrada

entradaencoded = onehotencorder.transform(entrada)

entradaescalonada = scaler.transform(entradaencoded)

previsao = classifier.predict(entradaescalonada)
previsao

labelencorder_saida.inverse_transform(previsao[0].astype(int))[0]

"""Salvar Modelo e Serializar os Encoders

"""

classifier.save('modelosalvo.h5')

novo_modelo = tf.keras.models.load_model('modelosalvo.h5')

novo_modelo.summary()

loss, acc = novo_modelo.evaluate(previsores, saida, verbose=2)
print('Modelo Restaurado, Precis√£o: {:5.2f}%'.format(100 * acc))

from joblib import dump, load
dump(onehotencorder, 'dicionario.joblib')

onehotencodernovo = load('dicionario.joblib')

onehotencodernovo

dump(labelencorder_saida, 'saidadicionario.joblib')

labelencorder_saidanovo = load('saidadicionario.joblib')

labelencorder_saidanovo
