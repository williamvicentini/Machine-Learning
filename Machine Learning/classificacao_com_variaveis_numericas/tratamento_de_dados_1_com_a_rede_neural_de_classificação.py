# -*- coding: utf-8 -*-
"""Tratamento de Dados 1 com a rede neural de classificação.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nYXXrFL0HGJlVmqAILZev_60KOOi4jzZ
"""

import pandas as pd
import numpy as np
import tensorflow as tf

base = pd.read_csv('/content/credit_data.csv')

base.describe()

"""Localiza na base as idades menores que 0"""

base.loc[base['age'] < 0]

"""Exemplo de Exclusão, porem não recomendavel"""

base.drop(base[base.age < 0].index, inplace=True)

base.mean()

"""Não é recomendavel apagar os registro é bom colocar as medias de idades """

base['age'][base.age > 0].mean()

base.loc[base.age < 0, 'age'] = base['age'][base.age > 0].mean()

base.loc[pd.isnull(base['age'])]

previsores = base.iloc[:, 1:4]

previsores.describe()

classe = base.iloc[:, 4].values

classe

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer = imputer.fit(previsores.iloc[:, 0:3])
previsores.iloc[:,0:3] = imputer.transform(previsores.iloc[:,0:3])



previsores.describe()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
previsores = scaler.fit_transform(previsores)

previsores

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(previsores, classe, test_size = 0.2, random_state = 5)

X_train.shape

classifier = tf.keras.models.Sequential()
classifier.add(tf.keras.layers.Dense(units=10, activation='relu', input_shape=(3, )))
classifier.add(tf.keras.layers.Dense(units=10, activation='relu'))
classifier.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

classifier.summary()

classifier.compile(optimizer='Adam', loss='binary_crossentropy', metrics = ['accuracy'])

epochs_hist = classifier.fit(X_train, y_train, epochs=400)

base[base['c#default'] == 0]

verdadeiros

predicao = classifier.predict(scaler.transform([[24254.700791,35,0]]))
predicao > 0.5